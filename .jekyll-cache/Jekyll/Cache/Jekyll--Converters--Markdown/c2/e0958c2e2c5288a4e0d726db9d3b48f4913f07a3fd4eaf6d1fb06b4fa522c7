I"`l<p>Integers, or <em>whole number</em> from elemental mathematics, are the most common and 
fundamental numbers used in the computers. It’s represented as 
<em>fixed-point numbers</em>, contrast to <em>floating-point numbers</em> in the machine. 
Today we are going to learn a whole bunch of way to encode it.</p>

<p>There are mainly two properties to make a integer representation different:</p>

<ol>
  <li>
    <p><strong>Size, of the number of bits used</strong>.<br />
usually the power of 2. e.g. 8-bit, 16-bit, 32-bit, 64-bit.</p>
  </li>
  <li>
    <p><strong>Signed or unsigned</strong>.<br />
there are also multiple schemas to encode a signed integers.</p>
  </li>
</ol>

<p>We are also gonna use the below terminologies throughout the post:</p>

<ul>
  <li><em>MSB</em>: Most Significant Bit</li>
  <li><em>LSB</em>: Least Significant Bit</li>
</ul>

<h2 id="prerequisite---printf-recap">Prerequisite - <code class="language-plaintext highlighter-rouge">printf</code> Recap</h2>

<p>We will quickly recap the integers subset of usages of <code class="language-plaintext highlighter-rouge">printf</code>.
Basically, we used <em>format specifier</em> to interpolate values into strings:</p>

<h3 id="format-specifier"><a href="http://www.cplusplus.com/reference/cstdio/printf/">Format Specifier</a></h3>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">%[flags][width][.precision][length]specifier</code></p>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">specifier</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">d</code>, <code class="language-plaintext highlighter-rouge">i</code> : signed decimal</li>
      <li><code class="language-plaintext highlighter-rouge">u</code> : unsigned decimal</li>
      <li><code class="language-plaintext highlighter-rouge">c</code> : char</li>
      <li><code class="language-plaintext highlighter-rouge">p</code>: pointer addr</li>
      <li><code class="language-plaintext highlighter-rouge">x</code> / <code class="language-plaintext highlighter-rouge">X</code> : lower/upper unsigned hex</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">length</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">l</code> : long (at least 32)</li>
      <li><code class="language-plaintext highlighter-rouge">ll</code> : long long (at least 64)</li>
      <li><code class="language-plaintext highlighter-rouge">h</code> : short (usually 16)</li>
      <li><code class="language-plaintext highlighter-rouge">hh</code> : short short (usually 8)</li>
    </ul>
  </li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span> 
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>  <span class="p">{</span>  
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Size of int = "</span><span class="o">&lt;&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>  
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Size of long = "</span> <span class="o">&lt;&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">long</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>  
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Size of long long = "</span> <span class="o">&lt;&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">long</span> <span class="kt">long</span><span class="p">);</span>  
<span class="p">}</span>  
<span class="n">Output</span> <span class="n">in</span> <span class="mi">32</span> <span class="n">bit</span> <span class="n">gcc</span> <span class="n">compiler</span><span class="o">:</span> <span class="mi">4</span> <span class="mi">4</span> <span class="mi">8</span>
<span class="n">Output</span> <span class="n">in</span> <span class="mi">64</span> <span class="n">bit</span> <span class="n">gcc</span> <span class="n">compiler</span><span class="o">:</span> <span class="mi">4</span> <span class="mi">8</span> <span class="mi">8</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="inttypesh-from-c99"><a href="http://www.qnx.com/developers/docs/6.5.0/index.jsp?topic=%2Fcom.qnx.doc.dinkum_en_c99%2Finttypes.html"><code class="language-plaintext highlighter-rouge">inttypes.h</code> from C99</a></h3>

<p>Also in <a href="https://en.cppreference.com/w/c/types/integer">cppreference.com</a></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre><span class="c1">// signed int (d or i)</span>
<span class="cp">#define PRId8     "hhd"
#define PRId16    "hd"
#define PRId32    "ld"
#define PRId64    "lld"
</span>
<span class="c1">// unsigned int (u)</span>
<span class="cp">#define PRIu8     "hhd"
#define PRIu16    "hd"
#define PRIu32    "ld"
#define PRIu64    "lld"
</span>
<span class="c1">// unsigned hex</span>
<span class="cp">#define PRIx8     "hhu"
#define PRIx16    "hu"
#define PRIx32    "lu"
#define PRIx64    "llu"
</span>
<span class="c1">// uintptr_t (64 bit machine word len)</span>
<span class="cp">#define PRIxPTR   "llx"  
</span></pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="unsigned-integers">Unsigned Integers</h2>

<p>The conversion between unsigned integers and binaries are trivial. 
Here, we can represent 8 bits (i.e. a <em>byte</em>) as a <em>hex pair</em>, e.g. 
<code class="language-plaintext highlighter-rouge">255 == 0xff == 0b11111111</code>.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="cp">#include &lt;stdint.h&gt;    // uintN_t
#include &lt;inttypes.h&gt;  // PRI macros
</span>
<span class="kt">uint8_t</span> <span class="n">u8</span> <span class="o">=</span> <span class="mi">255</span><span class="p">;</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"0x%02"</span> <span class="n">PRIx8</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">u8</span><span class="p">);</span> <span class="c1">// 0xff</span>
<span class="n">printf</span><span class="p">(</span>  <span class="s">"%"</span>   <span class="n">PRId8</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">u8</span><span class="p">);</span> <span class="c1">// 255</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="signed-integers">Signed Integers</h2>

<p>Signed integers are more complicated. We need to cut those bits to halves 
to represent both positive and negative integers somehow.</p>

<p>There are four well-known schemas to encode it, according to
<a href="https://en.wikipedia.org/wiki/Signed_number_representations">signed number representation of wikipedia</a>.</p>

<h3 id="sign-magnitude-原码">Sign magnitude 原码</h3>

<p>It’s also called <em>“sign and magnitude”</em>. From the name we can see how straightforward it is:
it’s basically put one bit (often the <em>MSB</em>) as the <em>sign bit</em> to represent <em>sign</em> and the remaining bits indicating
the magnitude (or absolute value), e.g.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre>  <span class="n">binary</span>   <span class="o">|</span> <span class="n">sign</span><span class="o">-</span><span class="n">magn</span> <span class="o">|</span>  <span class="kt">unsigned</span> 
<span class="o">-----------|-----------|------------</span>
<span class="mi">0</span> <span class="mo">000</span> <span class="mo">0000</span> <span class="o">|</span>    <span class="o">+</span><span class="mi">0</span>     <span class="o">|</span>     <span class="mi">0</span>
<span class="mi">0</span> <span class="mi">111</span> <span class="mi">1111</span> <span class="o">|</span>    <span class="mi">127</span>    <span class="o">|</span>    <span class="mi">127</span>
<span class="p">...</span>
<span class="mi">1</span> <span class="mo">000</span> <span class="mo">0000</span> <span class="o">|</span>    <span class="o">-</span><span class="mi">0</span>     <span class="o">|</span>    <span class="mi">128</span>
<span class="mi">1</span> <span class="mi">111</span> <span class="mi">1111</span> <span class="o">|</span>   <span class="o">-</span><span class="mi">127</span>    <span class="o">|</span>    <span class="mi">255</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>It was used in early computer (IBM 7090) and now mainly used in the 
<em>significand</em> part in floating-point number</p>

<p>Pros:</p>
<ul>
  <li>simple and nature for human</li>
</ul>

<p>Cons:</p>
<ul>
  <li>2 way to represent zeros (<code class="language-plaintext highlighter-rouge">+0</code> and <code class="language-plaintext highlighter-rouge">-0</code>)</li>
  <li>not as good for machine
    <ul>
      <li>add/sub/cmp require knowing the sign
        <ul>
          <li>complicate CPU ALU design; potentially more cycles</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="ones-complement-反码"><a href="https://en.wikipedia.org/wiki/Ones%27_complement">Ones’ complement</a> 反码</h3>

<p>It form a negative integers by applying a <em>bitwise NOT</em> 
i.e. <em>complement</em> of its positive counterparts.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre>  <span class="n">binary</span>   <span class="o">|</span>  <span class="mx">1s</span> <span class="n">comp</span>  <span class="o">|</span>  <span class="kt">unsigned</span> 
<span class="o">-----------|-----------|------------</span>
<span class="mo">0000</span> <span class="mo">0000</span>  <span class="o">|</span>     <span class="mi">0</span>     <span class="o">|</span>     <span class="mi">0</span>
<span class="mo">0000</span> <span class="mo">0001</span>  <span class="o">|</span>     <span class="mi">1</span>     <span class="o">|</span>     <span class="mi">1</span>
<span class="p">...</span>
<span class="mo">0111</span> <span class="mi">1111</span>  <span class="o">|</span>    <span class="mi">127</span>    <span class="o">|</span>    <span class="mi">127</span>
<span class="mi">1000</span> <span class="mo">0000</span>  <span class="o">|</span>   <span class="o">-</span><span class="mi">127</span>    <span class="o">|</span>    <span class="mi">128</span>
<span class="p">...</span>
<span class="mi">1111</span> <span class="mi">1110</span>  <span class="o">|</span>    <span class="o">-</span><span class="mi">1</span>     <span class="o">|</span>    <span class="mi">254</span> 
<span class="mi">1111</span> <span class="mi">1111</span>  <span class="o">|</span>    <span class="o">-</span><span class="mi">0</span>     <span class="o">|</span>    <span class="mi">255</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>N.B. <em>MSB</em> can still be signified by MSB.</p>

<p>It’s referred to as <em>ones’</em> complement because the negative can be formed 
by subtracting the positive <strong>from</strong> <em>ones</em>: <code class="language-plaintext highlighter-rouge">1111 1111 (-0)</code></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>  <span class="mi">1111</span> <span class="mi">1111</span>       <span class="o">-</span><span class="mi">0</span>
<span class="o">-</span> <span class="mo">0111</span> <span class="mi">1111</span>       <span class="mi">127</span>
<span class="o">---------------------</span>
  <span class="mi">1000</span> <span class="mo">0000</span>      <span class="o">-</span><span class="mi">127</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The benefits of the complement nature is that adding becomes simple, 
except we need to do an <em>end-around carry</em> to add resulting carry
back to get the correct result.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre>  <span class="mo">0111</span> <span class="mi">1111</span>       <span class="mi">127</span>
<span class="o">+</span> <span class="mi">1000</span> <span class="mo">0001</span>      <span class="o">-</span><span class="mi">126</span>
<span class="o">---------------------</span>
<span class="mi">1</span> <span class="mo">0000</span> <span class="mo">0000</span>        <span class="mi">0</span>
          <span class="mi">1</span>       <span class="o">+</span><span class="mi">1</span>     <span class="o">&lt;-</span> <span class="n">add</span> <span class="n">carry</span> <span class="s">"1"</span> <span class="n">back</span>
<span class="o">---------------------</span>
  <span class="mo">0000</span> <span class="mo">0001</span>        <span class="mi">1</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Pros:</p>
<ul>
  <li>Arithmetics on machien are fast.</li>
</ul>

<p>Cons:</p>
<ul>
  <li>still 2 zeros!</li>
</ul>

<h3 id="twos-complement-补码"><a href="https://en.wikipedia.org/wiki/Two%27s_complement">Twos’ complement</a> 补码</h3>

<p>Most of the current architecture adopted this, including x86, MIPS, ARM, etc.
It differed with one’s complement by one.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre>  <span class="n">binary</span>   <span class="o">|</span>  <span class="mx">2s</span> <span class="n">comp</span>  <span class="o">|</span>  <span class="kt">unsigned</span> 
<span class="o">-----------|-----------|------------</span>
<span class="mo">0000</span> <span class="mo">0000</span>  <span class="o">|</span>     <span class="mi">0</span>     <span class="o">|</span>     <span class="mi">0</span>
<span class="mo">0000</span> <span class="mo">0001</span>  <span class="o">|</span>     <span class="mi">1</span>     <span class="o">|</span>     <span class="mi">1</span>
<span class="p">...</span>
<span class="mo">0111</span> <span class="mi">1111</span>  <span class="o">|</span>    <span class="mi">127</span>    <span class="o">|</span>    <span class="mi">127</span>
<span class="mi">1000</span> <span class="mo">0000</span>  <span class="o">|</span>   <span class="o">-</span><span class="mi">128</span>    <span class="o">|</span>    <span class="mi">128</span>
<span class="mi">1000</span> <span class="mo">0001</span>  <span class="o">|</span>   <span class="o">-</span><span class="mi">127</span>    <span class="o">|</span>    <span class="mi">129</span>
<span class="p">...</span>
<span class="mi">1111</span> <span class="mi">1110</span>  <span class="o">|</span>    <span class="o">-</span><span class="mi">2</span>     <span class="o">|</span>    <span class="mi">254</span> 
<span class="mi">1111</span> <span class="mi">1111</span>  <span class="o">|</span>    <span class="o">-</span><span class="mi">1</span>     <span class="o">|</span>    <span class="mi">255</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>N.B. <em>MSB</em> can still be signified by MSB.</p>

<p>It’s referred to as <em>twos’</em> complement because the negative can be formed 
by subtracting the positive <strong>from</strong> <code class="language-plaintext highlighter-rouge">2 ** N</code> (congruent to <code class="language-plaintext highlighter-rouge">0000 0000 (+0)</code>),
where <code class="language-plaintext highlighter-rouge">N</code> is the number of bits.</p>

<p>E.g., for a <code class="language-plaintext highlighter-rouge">uint8_t</code>, the <em>sum</em> of any number and it’s twos’ complement would 
be <code class="language-plaintext highlighter-rouge">256 (1 0000 0000)</code>:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="mi">1</span> <span class="mo">0000</span> <span class="mo">0000</span>       <span class="mi">256</span>  <span class="o">=</span> <span class="mi">2</span> <span class="o">**</span> <span class="mi">8</span>
<span class="o">-</span> <span class="mo">0111</span> <span class="mi">1111</span>       <span class="mi">127</span>
<span class="o">---------------------</span>
  <span class="mi">1000</span> <span class="mo">0001</span>      <span class="o">-</span><span class="mi">127</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Becuase of this, arithmetics becomes really easier, for any number <code class="language-plaintext highlighter-rouge">x</code> e.g. <code class="language-plaintext highlighter-rouge">127</code>
we can get its twos’ complement by:</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">~x =&gt; 1000 0000</code> bitwise NOT (like ones’ complement)</li>
  <li><code class="language-plaintext highlighter-rouge">+1 =&gt; 1000 0001</code> add 1 (the one differed from ones’ complement)</li>
</ol>

<p>Cons:</p>
<ul>
  <li>bad named?</li>
</ul>

<p>Pros:</p>
<ul>
  <li>fast machine arithmatics.</li>
  <li>only 1 zeros!</li>
  <li>the minimal negative is <code class="language-plaintext highlighter-rouge">-128</code></li>
</ul>

<h3 id="offset-binary-移码"><a href="https://en.wikipedia.org/wiki/Offset_binary">Offset binary</a> 移码</h3>

<p>It’s also called <em>excess-K</em> (偏移 K) or <em>biased representation</em>, where <code class="language-plaintext highlighter-rouge">K</code> is
the <em>biasing value</em> (the new <code class="language-plaintext highlighter-rouge">0</code>), e.g. in <em>excess-128</em>:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre>  <span class="n">binary</span>   <span class="o">|</span>  <span class="n">K</span> <span class="o">=</span> <span class="mi">128</span>  <span class="o">|</span>  <span class="kt">unsigned</span> 
<span class="o">-----------|-----------|------------</span>
<span class="mo">0000</span> <span class="mo">0000</span>  <span class="o">|</span>   <span class="o">-</span><span class="mi">128</span><span class="p">(</span><span class="o">-</span><span class="n">K</span><span class="p">)</span><span class="o">|</span>     <span class="mi">0</span>
<span class="mo">0000</span> <span class="mo">0001</span>  <span class="o">|</span>   <span class="o">-</span><span class="mi">127</span>    <span class="o">|</span>     <span class="mi">1</span>
<span class="p">...</span>
<span class="mo">0111</span> <span class="mi">1111</span>  <span class="o">|</span>    <span class="o">-</span><span class="mi">1</span>     <span class="o">|</span>    <span class="mi">127</span>
<span class="mi">1000</span> <span class="mo">0000</span>  <span class="o">|</span>     <span class="mi">0</span>     <span class="o">|</span>    <span class="mi">128</span>  <span class="p">(</span><span class="n">K</span><span class="p">)</span>
<span class="mi">1000</span> <span class="mo">0001</span>  <span class="o">|</span>     <span class="mi">1</span>     <span class="o">|</span>    <span class="mi">129</span>
<span class="p">...</span>
<span class="mi">1111</span> <span class="mi">1111</span>  <span class="o">|</span>    <span class="mi">127</span>    <span class="o">|</span>    <span class="mi">255</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>It’s now mainly used for the <em>exponent</em> part of floating-point number.</p>

<h2 id="type-conversion--printf">Type Conversion &amp; <code class="language-plaintext highlighter-rouge">Printf</code></h2>

<p>This might be a little bit off topic, but I want to note down what I observed
from experimenting. Basically, <code class="language-plaintext highlighter-rouge">printf</code> would not perform an implicit type
conversion but merely <em>interpret</em> the bits arrangement of your arguments as you 
told it.</p>

<ul>
  <li><em>UB!</em> stands for <em>undefined behaviors</em></li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="kt">uint8_t</span> <span class="n">u8</span> <span class="o">=</span> <span class="mb">0b10000000</span><span class="p">;</span> <span class="c1">// 128</span>
 <span class="kt">int8_t</span> <span class="n">s8</span> <span class="o">=</span> <span class="mb">0b10000000</span><span class="p">;</span> <span class="c1">// -128</span>

<span class="n">printf</span><span class="p">(</span><span class="s">"%"</span><span class="n">PRIu8</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">u8</span><span class="p">);</span>          <span class="c1">// 128</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"%"</span><span class="n">PRId8</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">u8</span><span class="p">);</span>          <span class="c1">// 128 (UB! but somehow it's got right)</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"%"</span><span class="n">PRId8</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="p">(</span><span class="kt">int8_t</span><span class="p">)</span><span class="n">u8</span><span class="p">);</span>  <span class="c1">// -128</span>

<span class="n">printf</span><span class="p">(</span><span class="s">"%"</span><span class="n">PRId8</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">s8</span><span class="p">);</span>          <span class="c1">// -128</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"%"</span><span class="n">PRIu8</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">s8</span><span class="p">);</span>          <span class="c1">// 4294967168 (UB!)</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"%"</span><span class="n">PRId8</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="p">(</span><span class="kt">uint8_t</span><span class="p">)</span><span class="n">s8</span><span class="p">);</span> <span class="c1">// 128</span>

<span class="n">printf</span><span class="p">(</span><span class="s">"%"</span><span class="n">PRIxPTR</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">s8</span><span class="p">);</span>             <span class="c1">// ffffff80</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"%"</span><span class="n">PRIxPTR</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="p">(</span><span class="kt">uintptr_t</span><span class="p">)</span><span class="n">s8</span><span class="p">);</span>  <span class="c1">// ffffffffffffff80</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="char--ascii">Char &amp; <a href="https://en.wikipedia.org/wiki/ASCII">ASCII</a></h2>

<p>Traditionally, <code class="language-plaintext highlighter-rouge">char</code> is represented in the computer as 8 bits as well. And 
really, ASCII is only defined between <code class="language-plaintext highlighter-rouge">0</code> and <code class="language-plaintext highlighter-rouge">127</code> and require 7 bits. 
(8-bit Extended ASCII is not quite well popularized and supported.)</p>

<p>It’s more complicated in extension such as <em>Unicode</em> nowadays, but we’ll ignore 
it for future posts dedicated for char and string representation.</p>

<p>So how is a <code class="language-plaintext highlighter-rouge">char</code> different with a <em>byte</em>?</p>

<p>Well, the answer is whether a <code class="language-plaintext highlighter-rouge">char</code> is a <code class="language-plaintext highlighter-rouge">signed char</code> (backed by <code class="language-plaintext highlighter-rouge">int8_t</code>) 
or a <code class="language-plaintext highlighter-rouge">unsigned char</code> (backed by <code class="language-plaintext highlighter-rouge">uint8_t</code>) is… <em>implementaton-defined</em>. 
And most systems made it <em>signed</em> since most types (e.g. <code class="language-plaintext highlighter-rouge">int</code>) were signed 
by default.</p>

<p>N.B. <code class="language-plaintext highlighter-rouge">int</code> is standard-defined to be equivalent to <code class="language-plaintext highlighter-rouge">signed int</code>. This is
not the case of <code class="language-plaintext highlighter-rouge">char</code>.</p>

<p>That’s why you often see such <code class="language-plaintext highlighter-rouge">typedef</code> such as:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">Byte_t</span><span class="p">;</span>
<span class="k">typedef</span> <span class="kt">uint8_t</span> <span class="n">byte_t</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>to emphysize the nature of byte should be just plain, unsigned, bits.</p>

<h2 id="references">References</h2>

<ul>
  <li><a href="https://en.wikipedia.org/wiki/Integer_(computer_science)">https://en.wikipedia.org/wiki/Integer_(computer_science)</a></li>
  <li><a href="https://www3.ntu.edu.sg/home/ehchua/programming/java/datarepresentation.html">https://www3.ntu.edu.sg/home/ehchua/programming/java/datarepresentation.html</a></li>
</ul>

:ET